(nqueens
 (extends_TCC1 0
  (extends_TCC1-1 nil 3504609557 ("" (subtype-tcc) nil nil) nil nil
   (extends subtype "nqueens.j" "naturalnumbers.below(nqueens.N)")))
 (search_TCC1 0
  (search_TCC1-1 nil 3504606239 ("" (subtype-tcc) nil nil) nil nil
   (search subtype "(number_fields.+)(nqueens.i, 1)"
     "naturalnumbers.upto(nqueens.N)")))
 (search_TCC2 0
  (search_TCC2-1 nil 3504606239 ("" (subtype-tcc) nil nil) nil nil
   (search subtype "nqueens.k" "naturalnumbers.below(nqueens.N)")))
 (search_TCC3 0
  (search_TCC4-1 nil 3504606239 ("" (subtype-tcc) nil nil) nil nil
   (search subtype "(number_fields.+)(nqueens.i, 1)"
     "naturalnumbers.upto(nqueens.N)")))
 (search_TCC4 0
  (search_TCC5-1 nil 3504606239 ("" (subtype-tcc) nil nil) nil nil
   (search subtype "nqueens.i" "naturalnumbers.upto(nqueens.N)")))
 (search_TCC5 0
  (search_TCC3-1 nil 3504606239 ("" (subtype-tcc) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (search subtype "(number_fields.-)(nqueens.N, nqueens.j)"
     "naturalnumber")))
 (search_TCC6 0
  (search_TCC6-1 nil 3504606239
   ("" (skeep :preds? t)
    (("" (expand "qlift?")
      (("" (expand "good_extension?")
        (("" (expand "extends")
          (("" (skeep)
            (("" (inst - "queen(i)" "queen")
              (("1" (assert) (("1" (lazy-grind) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qlift? const-decl "bool" nqueens nil)
    (extends const-decl "bool" nqueens nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "{j |
   FORALL (k: below(j), B):
     NOT good_extension?(1 + i, A WITH [i := k], p)(B)}" nqueens nil)
    (p skolem-const-decl "[board -> bool]" nqueens nil)
    (A skolem-const-decl "board" nqueens nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (i skolem-const-decl "below(N)" nqueens nil)
    (queen skolem-const-decl "board" nqueens nil)
    (board type-eq-decl nil nqueens nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_extension? const-decl "bool" nqueens nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (search subtype "lift_adt[board].bottom"
     "(nqueens.qlift?(nqueens.good_extension?(nqueens.i, nqueens.A, nqueens.p)))")))
 (search_TCC7 0
  (search_TCC7-1 nil 3504606239
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (skeep)
        (("" (inst?)
          (("" (typepred "f(B)")
            (("" (expand "qlift?")
              (("" (inst - "B!1") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (board type-eq-decl nil nqueens nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_extension? const-decl "bool" nqueens nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k skolem-const-decl "below(1 + j)" nqueens nil)
    (j skolem-const-decl "{j |
   FORALL (k: below(j), B):
     NOT good_extension?(1 + i, A WITH [i := k], p)(B)}" nqueens nil)
    (p skolem-const-decl "[board -> bool]" nqueens nil)
    (A skolem-const-decl "board" nqueens nil)
    (i skolem-const-decl "below(N)" nqueens nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (qlift? const-decl "bool" nqueens nil)
    (lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (search subtype "(number_fields.+)(nqueens.j, 1)"
     "{j | FORALL (k: naturalnumbers.below(nqueens.j), B): (booleans.NOT)(nqueens.good_extension?((number_fields.+)(1, nqueens.i), nqueens.A WITH [(nqueens.i) := k], nqueens.p)(nqueens.B))}")))
 (search_TCC8 0
  (search_TCC8-1 nil 3504610279 ("" (termination-tcc) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (search termination
           "nqueens.search(nqueens.i, nqueens.A, nqueens.p, (number_fields.+)(nqueens.j, 1), nqueens.f)"
     "nil")))
 (search_TCC9 0
  (search_TCC9-1 nil 3758159714
   ("" (skeep* :preds? t)
    (("" (typepred "f(B)")
      (("" (expand "qlift?")
        (("" (ground)
          (("" (hide -4)
            (("" (expand "good_extension?")
              (("" (ground)
                (("1" (replace -6) (("1" (assert) nil nil)) nil)
                 ("2" (expand "extends")
                  (("2" (skeep :preds? t)
                    (("2" (inst - "j!1")
                      (("2" (assert)
                        (("2" (replace -6 :hide? t)
                          (("2" (assert)
                            (("2" (replace -6 :hide? t)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (good_extension? const-decl "bool" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (qlift? const-decl "bool" nqueens nil)
    (lift type-decl nil lift_adt nil)
    (board type-eq-decl nil nqueens nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (extends const-decl "bool" nqueens nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (search subtype "lift_adt[board].up(nqueens.C)"
     "(nqueens.qlift?(nqueens.good_extension?(nqueens.i, nqueens.A, nqueens.p)))")))
 (search_TCC10 0
  (search_TCC10-1 nil 3758159714 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (board type-eq-decl nil nqueens nil)
    (good_extension? const-decl "bool" nqueens nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (search subtype "nqueens.j" "naturalnumbers.below(nqueens.N)")))
 (scan_TCC1 0
  (scan_TCC1-1 nil 3504606239 ("" (subtype-tcc) nil nil) nil nil
   (scan subtype "(number_fields.-)(nqueens.N, nqueens.i)"
    "naturalnumber")))
 (scan_TCC2 0
  (scan_TCC2-1 nil 3504606239 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (extends const-decl "bool" nqueens nil)
    (good_extension? const-decl "bool" nqueens nil)
    (qlift? const-decl "bool" nqueens nil))
   nil
   (scan subtype "lift_adt[board].up(nqueens.queen)"
    "(nqueens.qlift?(nqueens.good_extension?(nqueens.i, nqueens.queen, nqueens.p)))")))
 (scan_TCC3 0
  (scan_TCC3-1 nil 3504606239
   ("" (grind)
    (("" (extensionality "board")
      (("" (grind :if-match nil)
        (("" (inst - "queen!1" "queen!2") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (board type-eq-decl nil nqueens nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (qlift? const-decl "bool" nqueens nil)
    (good_extension? const-decl "bool" nqueens nil)
    (extends const-decl "bool" nqueens nil))
   nil
   (scan subtype "lift_adt[board].bottom"
    "(nqueens.qlift?(nqueens.good_extension?(nqueens.i, nqueens.queen, nqueens.p)))")))
 (scan_TCC4 0
  (scan_TCC4-1 nil 3504606239 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (scan subtype "nqueens.i" "naturalnumbers.below(nqueens.N)")))
 (scan_TCC5 0
  (scan_TCC5-1 nil 3504606239 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (extends const-decl "bool" nqueens nil)
    (good_extension? const-decl "bool" nqueens nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (scan subtype "0"
    "{j | FORALL (k: naturalnumbers.below(nqueens.j), B): (booleans.NOT)(nqueens.good_extension?((number_fields.+)(1, nqueens.i), nqueens.queen WITH [(nqueens.i) := k], nqueens.p)(nqueens.B))}")))
 (scan_TCC6 0
  (scan_TCC6-1 nil 3504606239 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" nqueens nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (scan subtype "(number_fields.+)(nqueens.i, 1)"
    "naturalnumbers.upto(nqueens.N)")))
 (scan_TCC7 0
  (scan_TCC7-1 nil 3504606239 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scan termination
    "nqueens.scan((number_fields.+)(nqueens.i, 1), nqueens.p)" "nil")))
 (findboard_TCC1 0
  (findboard_TCC1-1 nil 3504642677 ("" (subtype-tcc) nil nil) nil nil
   (findboard subtype "0" "naturalnumbers.below(nqueens.N)")))
 (findboard_TCC2 0
  (findboard_TCC2-1 nil 3504642677 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (findboard subtype "0" "naturalnumbers.upto(nqueens.N)")))
 (findboard_TCC3 0
  (findboard_TCC3-1 nil 3504642677
   (""
    (apply (then (grind)
            (typepred "scan(0, p!1)(LAMBDA (i: below(N)): 0)")
            (grind)))
    nil nil)
   ((qlift? const-decl "bool" nqueens nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (extends const-decl "bool" nqueens nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" nqueens nil)
    (below type-eq-decl nil naturalnumbers nil)
    (board type-eq-decl nil nqueens nil)
    (lift type-decl nil lift_adt nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_extension? const-decl "bool" nqueens nil)
    (scan def-decl "(qlift?(good_extension?(i, queen, p)))" nqueens
     nil))
   nil
   (findboard subtype
    "nqueens.scan(0, nqueens.p)(LAMBDA (i: naturalnumbers.below(nqueens.N)): 0)"
    "(nqueens.qlift?(nqueens.p))"))))
(test_queens)

