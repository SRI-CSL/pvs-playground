(HoareVC
 (pre_TCC1 0
  (pre_TCC1-1 nil 3728257731 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[annotatedProgram])" HoareVC
     nil))
   nil (pre termination "HoareVC.pre(HoareVC.SS1)" "nil")))
 (pre_TCC2 0
  (pre_TCC2-1 nil 3728257731 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[annotatedProgram])" HoareVC
     nil))
   nil (pre termination "HoareVC.pre(HoareVC.SS2)" "nil")))
 (pre_TCC3 0
  (pre_TCC3-1 nil 3728257731 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[annotatedProgram])" HoareVC
     nil))
   nil (pre termination "HoareVC.pre(HoareVC.SS1)" "nil")))
 (pre_TCC4 0
  (pre_TCC4-1 nil 3728257731 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[annotatedProgram])" HoareVC
     nil))
   nil (pre termination "HoareVC.pre(HoareVC.SS2)" "nil")))
 (vc_TCC1 0
  (vc_TCC1-1 nil 3728257731 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[annotatedProgram])" HoareVC
     nil))
   nil (vc termination "HoareVC.vc(HoareVC.SS1)" "nil")))
 (vc_pre 0
  (vc_pre-1 nil 3728257741
   ("" (induct "SS")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind :exclude "triple_valid")
      (("4" (use "while_rule" :subst ("P" "while3_var!1"))
        (("4" (ground)
          (("1" (use "conseq_rule" :polarity? t)
            (("1" (ground)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
               ("2" (hide -1 -2 2) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (use "conseq_rule" :polarity? t)
              (("2" (ground)
                (("1" (hide -1 2) (("1" (grind) nil nil)) nil)
                 ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" HoareLogic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (conseq const-decl "bool" HoareLogic nil)
    (neg const-decl "bool" HoareLogic nil)
    (strengthen const-decl "bool" HoareLogic nil)
    (while adt-constructor-decl "[[test, program] -> (while?)]"
     HoareLogic nil)
    (while? adt-recognizer-decl "[program -> boolean]" HoareLogic nil)
    (conseq_rule formula-decl nil HoareLogic nil)
    (test type-eq-decl nil HoareLogic nil)
    (while_rule formula-decl nil HoareLogic nil)
    (⊓ const-decl "bool" HoareVC nil) (¬ const-decl "bool" HoareVC nil)
    (⊔ const-decl "bool" HoareVC nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "T3" function_props nil)
    (first const-decl "state" HoareLogic nil)
    (last const-decl "state" HoareLogic nil)
    (meaning def-decl "bool" HoareLogic nil)
    (triple_holds const-decl "bool" HoareLogic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil HoareLogic nil)
    (annotatedProgram_induction formula-decl nil HoareVC nil)
    (extract def-decl "program" HoareVC nil)
    (pre def-decl "assertion" HoareVC nil)
    (triple_valid const-decl "bool" HoareLogic nil)
    (program type-decl nil HoareLogic nil)
    (vc def-decl "bool" HoareVC nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (assertion type-eq-decl nil HoareLogic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (state type-eq-decl nil HoareLogic nil)
    (value formal-nonempty-type-decl nil HoareVC nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (annotatedProgram type-decl nil HoareVC nil))
   shostak)))

